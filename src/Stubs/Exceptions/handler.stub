<?php

namespace App\Exceptions;

use Illuminate\Validation\ValidationException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Throwable;

define('HTTP_STATUSES', [
    100 => "Continue",
    101 => "Switching Protocols",
    102 => "Processing",
    103 => "Early Hints",
    //
    200 => "OK",
    201 => "Created",
    202 => "Accepted",
    203 => "Non-Authoritative Information",
    204 => "No Content",
    205 => "Reset Content",
    206 => "Partial Content",
    207 => "Multi-Status",
    208 => "Already Reported",
    226 => "Im Used",
    //
    300 => "Multiple Choice",
    301 => "Moved Permanently",
    302 => "Found",
    303 => "See Other",
    304 => "Not Modified",
    305 => "Use Proxy Deprecated",
    306 => "Unused",
    307 => "Temporary Redirect",
    308 => "Permanent Redirect",
    //
    400 => "Bad Request",
    401 => "Unauthorized",
    402 => "Payment Required Experimental",
    403 => "Forbidden",
    404 => "Not Found",
    405 => "Method Not Allowed",
    406 => "Not Acceptable",
    407 => "Proxy Authentication Required",
    408 => "Request Timeout",
    409 => "Conflict",
    410 => "Gone",
    411 => "Length Required",
    412 => "Precondition Failed",
    413 => "Payload Too Large",
    414 => "URI Too Long",
    415 => "Unsupported Media Type",
    416 => "Range Not Satisfiable",
    417 => "Expectation Failed",
    418 => "I'm a teapot",
    421 => "Misdirected Request",
    422 => "Unprocessable Entity",
    423 => "Locked",
    424 => "Failed Dependency",
    425 => "Too Early",
    426 => "Upgrade Required",
    428 => "Precondition Required",
    429 => "Too Many Requests",
    431 => "Request Header Fields Too Large",
    451 => "Unavailable For Legal Reasons",
    //
    500 => "Internal Server Error",
    501 => "Not Implemented",
    502 => "Bad Gateway",
    503 => "Service Unavailable",
    504 => "Gateway Timeout",
    505 => "HTTP Version Not Supported",
    506 => "Variant Also Negotiates",
    507 => "Insufficient Storage",
    508 => "Loop Detected",
    510 => "Not Extended",
    511 => "Network Authentication Required",
]);

class Handler extends ExceptionHandler
{
    /**
     * A list of exception types with their corresponding custom log levels.
     *
     * @var array<class-string<\Throwable>, \Psr\Log\LogLevel::*>
     */
    protected $levels = [
        //
    ];

    /**
     * A list of the exception types that are not reported.
     *
     * @var array<int, class-string<\Throwable>>
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed to the session on validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     */
    public function register(): void
    {
        $this->renderable(function (Throwable $e, $request) {
            return self::CustomRender($e);
        });

        $this->reportable(function (Throwable $e) {
        });
    }

    public static function CustomRender(mixed $e)
    {
        // MyException
        if ($e instanceof Response) {
            return self::Response($e->status, (empty($e->getMessage()) ? null : $e->getMessage()), $e->data);
        } else if ($e instanceof ValidationException) {
            return self::Response(400, $e->getMessage(), $e->errors());
        }
        // any other exception
        return self::Response(500, $e->getMessage(), get_class($e), $e);
    }

    private static function Response($status, $message = null, $data = null, $exception = null)
    {
        $obj = [
            'status' => $status,
            'statusCode' => @HTTP_STATUSES[$status],
        ];
        if ($status == 200) {
            $obj['message'] =  $message;
        } else {
            $obj['error'] =  $message;
        }
        $obj['data'] =  $data ?? null;
        if (!empty($exception)) {
            $e = $exception;
            $obj['exception'] = [
                "type" => get_class($e),
                "code" => $e->getCode(),
                "message" => $e->getMessage(),
                "file" => $e->getFile(),
                "line" => $e->getLine(),
                "trace" => $e->getTrace(),
            ];
        }
        return response()->json($obj, $status);
    }
}
